version: '3.8'

services:
  web:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - POSTGRES_SERVER=db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      - db
      - redis
    volumes:
      - ../data:/app/data
    networks:
      - clarity_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:13
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - clarity_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - clarity_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:1.21-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro
      - ../static:/app/static
      - ../media:/app/media
    depends_on:
      - web
    networks:
      - clarity_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery_worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    command: celery -A clarity.tasks worker --loglevel=info
    environment:
      - ENVIRONMENT=production
      - POSTGRES_SERVER=db
      - REDIS_HOST=redis
    depends_on:
      - db
      - redis
    networks:
      - clarity_network

  celery_beat:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    command: celery -A clarity.tasks beat --loglevel=info
    environment:
      - ENVIRONMENT=production
      - POSTGRES_SERVER=db
      - REDIS_HOST=redis
    depends_on:
      - db
      - redis
    networks:
      - clarity_network

volumes:
  postgres_data:
  redis_data:

networks:
  clarity_network:
    driver: bridge
